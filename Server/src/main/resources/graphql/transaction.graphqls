enum TransactionType {
    LOAN
    TRADE
}

type Transaction {
    id: ID
    product: ProductData
    fromOwnerId: ID
    toOwnerId: ID
    transactionType: TransactionType
    fromRentDate: String
    toRentDate: String
}

type GenericResponseTransaction {
    message: String
    data: Transaction
}

type GenericResponseTransactions {
    message: String
    data: [Transaction]
}

type TransactionPage {
    content: [Transaction!]!
    totalPages: Int!
    totalElements: Int!
    number: Int!
    size: Int!
}

extend type Query {
    seeBought(page: Int!, limit: Int!, sortDirection: SortDirection!): TransactionPage!
    seeSold(page: Int!, limit: Int!, sortDirection: SortDirection!): TransactionPage!
    seeLent(page: Int!, limit: Int!, sortDirection: SortDirection!): TransactionPage!
    seeBorrowed(page: Int!, limit: Int!, sortDirection: SortDirection!): TransactionPage!
    getTransactionsByProductId(productId: String!): GenericResponseTransactions!
}

extend type Mutation {
    buyProduct(product: ProductInput!): GenericResponseTransaction!
    rentProduct(product: ProductInput!, fromRentDate: String!, toRentDate: String!): GenericResponseTransaction!
}
